{"version":3,"sources":["components/Header.jsx","methods/API.js","components/WeatherDetails.jsx","components/CityInfo.jsx","components/WeatherIcon.jsx","components/CurrentWeather.jsx","components/WeatherForecast.jsx","components/ForecastList.jsx","components/SearchForm.jsx","components/Navigation.jsx","components/Content.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","src","alt","API","API_URL","API_KEY","fetchWeather","city","code","correct","error","fetch","then","response","ok","json","Error","fetchForecast","WidgetTable","data","weather","map","el","capitalize","description","join","scope","main","temp","humidity","pressure","clouds","all","wind","speed","toFixed","CityInfo","aria-hidden","moment","dt_txt","locale","format","WidgetIcon","icons","icon","key","CurrentWeather","useParams","useState","setWeather","weatherError","setWeatherError","useEffect","catch","WeatherIcon","WeatherDetails","WeatherForecast","forecast","ForecastList","forecastByDay","setForecastByDay","forecastError","setForecasterror","list","groupedForecast","groupBy","split","Object","entries","day","item","SearchForm","history","useHistory","cityParam","codeParam","setCity","setCode","isValid","setValid","onSubmit","e","preventDefault","length","push","type","name","value","placeholder","onChange","target","maxLength","Navigation","exact","to","activeClassName","Content","path","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9eba16bb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className='mb-3'>\r\n      <nav className=\"navbar navbar-dark bg-secondary\">\r\n        <a className=\"navbar-brand pl-4\" href=\"/\">\r\n          <img src=\"http://openweathermap.org/img/wn/11n.png\" alt='logo' />\r\n          Pogodynka\r\n        </a>\r\n      </nav>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","const API = () => {\r\n    const API_URL = 'https://api.openweathermap.org/data/2.5/';\r\n    const API_KEY = 'a56758b068e0436e0cacd6e5ef99693d';\r\n\r\n    const fetchCurrentWeather = (city, code, correct, error) => {\r\n        return fetch(`${API_URL}weather?q=${city},${code}&appid=${API_KEY}&units=metric&lang=pl`)\r\n            .then(response => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    throw new Error('Something went wrong');\r\n                }\r\n            });\r\n    };\r\n\r\n    const fetchWeatherForecast = (city, code, correct, error) => {\r\n        return fetch(`${API_URL}forecast?q=${city},${code}&appid=${API_KEY}&units=metric&lang=pl`)\r\n            .then(response => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                } else {\r\n                    throw new Error('Something went wrong');\r\n                }\r\n            });\r\n    };\r\n\r\n    return {\r\n        fetchWeather: fetchCurrentWeather,\r\n        fetchForecast: fetchWeatherForecast\r\n    }\r\n\r\n}\r\n\r\nexport default API();\r\n","import { capitalize } from 'lodash';\r\nimport React from 'react';\r\n\r\nconst WidgetTable = ({ data }) => {\r\n  return (\r\n    <>\r\n      <h2 className=\"alert alert-light text-center\">\r\n        {data.weather.map(el => capitalize(el.description)).join(' / ')}\r\n      </h2>\r\n      <table className=\"table table-striped text-center\">\r\n        <tbody>\r\n          <tr>\r\n            <th scope=\"row\">Temperetura</th>\r\n            <td className=\"font-weight-bold\">{data.main.temp} ℃</td>\r\n          </tr>\r\n          <tr>\r\n            <th scope=\"row\">Wilgotność</th>\r\n            <td className=\"font-weight-bold\">{data.main.humidity} %</td>\r\n          </tr>\r\n          <tr>\r\n            <th scope=\"row\">Ciśnienie</th>\r\n            <td className=\"font-weight-bold\">{data.main.pressure} hPa</td>\r\n          </tr>\r\n          <tr>\r\n            <th scope=\"row\">Zachmurzenie</th>\r\n            <td className=\"font-weight-bold\">{data.clouds.all} %</td>\r\n          </tr>\r\n          <tr>\r\n            <th scope=\"row\">Siła wiatru</th>\r\n            <td className=\"font-weight-bold\">\r\n              {(data.wind.speed * 0.36).toFixed(2)} km/h\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WidgetTable;\r\n","import moment from 'moment';\r\nimport { capitalize } from 'lodash';\r\nimport React from 'react';\r\n\r\nconst CityInfo = ({ weather, city }) => {\r\n  return (\r\n    <>\r\n      <h1>\r\n        <i className=\"fa fa-building-o\" aria-hidden=\"true\" /> {capitalize(city)}\r\n      </h1>\r\n      <h2>\r\n        <i className=\"fa fa-clock-o\" aria-hidden=\"true\" />{' '}\r\n        {moment(weather.dt_txt)\r\n          .locale('pl')\r\n          .format('LT')}\r\n      </h2>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CityInfo;\r\n","import React from 'react';\r\n\r\nconst WidgetIcon = ({ weather }) => {\r\n  const icons = weather.map(\r\n    el => `http://openweathermap.org/img/wn/${el.icon}@2x.png`\r\n  );\r\n  return (\r\n    <figure className=\"d-flex justify-content-center\">\r\n      {icons.map(icon => (\r\n        <img key={icon} src={icon} alt=\"weather icon\" />\r\n      ))}\r\n    </figure>\r\n  );\r\n};\r\n\r\nexport default WidgetIcon;\r\n","import moment from 'moment';\r\nimport { capitalize } from 'lodash';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport API from '../methods/API';\r\nimport WeatherDetails from './WeatherDetails';\r\nimport CityInfo from './CityInfo';\r\nimport WeatherIcon from './WeatherIcon';\r\n\r\nconst CurrentWeather = () => {\r\n  const { city, code } = useParams();\r\n  const [weather, setWeather] = useState(null);\r\n  const [weatherError, setWeatherError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    API.fetchWeather(city, code)\r\n      .then(data => setWeather(data))\r\n      .catch(error => setWeatherError(error));\r\n  }, [city, code]);\r\n\r\n  if (weatherError) {\r\n    return (\r\n      <div className=\"alert alert-danger\">\r\n        Ups, wystąpił problem. Sprawdź poprawność wpisanych danych lub\r\n        połączenie z siecią!\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!weather) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <section>\r\n        <h1 className=\"badge-dark rounded text-center\">\r\n          {capitalize(moment(weather.dt_txt).format('dddd'))}\r\n        </h1>\r\n        <div className=\"alert alert-secondary weather\">\r\n          <CityInfo weather={weather} city={city} />\r\n          <WeatherIcon weather={weather.weather} />\r\n          <WeatherDetails data={weather} />\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CurrentWeather;\r\n","import React from 'react';\r\n\r\nimport WeatherDetails from './WeatherDetails';\r\nimport CityInfo from './CityInfo';\r\nimport WeatherIcon from './WeatherIcon';\r\n\r\nconst WeatherForecast = ({ city, forecast }) => {\r\n  if (!forecast) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"alert alert-secondary weather\">\r\n      <CityInfo city={city} weather={forecast} />\r\n      <WeatherIcon weather={forecast.weather} />\r\n      <WeatherDetails data={forecast} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherForecast;\r\n","import { capitalize, groupBy } from 'lodash';\r\nimport moment from 'moment';\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport API from '../methods/API';\r\nimport WeatherForecast from './WeatherForecast';\r\n\r\nconst ForecastList = () => {\r\n  const { city, code } = useParams();\r\n  const [forecastByDay, setForecastByDay] = useState(null);\r\n  const [forecastError, setForecasterror] = useState(null);\r\n\r\n  useEffect(() => {\r\n    API.fetchForecast(city, code)\r\n      .then(({ list }) => {\r\n        const groupedForecast = groupBy(\r\n          list,\r\n          ({ dt_txt }) => dt_txt.split(' ')[0]\r\n        );\r\n        setForecastByDay(Object.entries(groupedForecast));\r\n      })\r\n      .catch(error => setForecasterror(error));\r\n  }, [city, code]);\r\n\r\n  if (forecastError) {\r\n    return (\r\n      <div className=\"alert alert-danger\">\r\n        Ups, wystąpił problem. Sprawdź poprawność wpisanych danych lub\r\n        połączenie z siecią!\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (forecastByDay) {\r\n    return forecastByDay.map(([day, forecast]) => (\r\n      <section key={day}>\r\n        <h1 className=\"badge-dark rounded text-center\">\r\n          {capitalize(\r\n            moment(day)\r\n              .locale('pl')\r\n              .format('dddd')\r\n          )}\r\n        </h1>\r\n        {forecast.map(item => (\r\n          <WeatherForecast key={item.dt_txt} forecast={item} city={city} />\r\n        ))}\r\n      </section>\r\n    ));\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport default ForecastList;\r\n","import React, { useState } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\n\r\nconst SearchForm = () => {\r\n  const history = useHistory();\r\n  const { city: cityParam, code: codeParam } = useParams();\r\n  const [city, setCity] = useState(cityParam);\r\n  const [code, setCode] = useState(codeParam);\r\n  const [isValid, setValid] = useState(true);\r\n\r\n  const onCityChange = e => {\r\n    setCity(e.target.value);\r\n  };\r\n\r\n  const onCodeChange = e => {\r\n    setCode(e.target.value);\r\n  };\r\n\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n    if (city && code.length >= 2) {\r\n      setValid(true);\r\n      history.push(`/${city}/${code}/weather`);\r\n    } else {\r\n      setValid(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit}>\r\n        <div className=\"form-group\">\r\n          <label className=\"text-center\">Podaj nazwę miasta</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"city\"\r\n            value={city}\r\n            placeholder=\"Nazwa miasta\"\r\n            onChange={onCityChange}\r\n            maxLength=\"15\"\r\n            className=\"form-control\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label className=\"text-center\">Podaj kod kraju</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"code\"\r\n            value={code}\r\n            placeholder=\"Kod kraju, np. pl\"\r\n            onChange={onCodeChange}\r\n            maxLength=\"5\"\r\n            className=\"form-control\"\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-secondary\">\r\n          Pobierz dane\r\n        </button>\r\n      </form>\r\n      {!isValid && (\r\n        <div className=\"alert alert-danger mt-3\">\r\n          Nazwa miasta i kod kraju są wymagane do prawidłowego działania\r\n          aplikacji!\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchForm;\r\n","import React from 'react';\r\nimport { NavLink, useParams } from 'react-router-dom';\r\n\r\nconst Navigation = () => {\r\n  const { city, code } = useParams();\r\n\r\n  return (\r\n    <ul className=\"nav nav-tabs my-3\">\r\n      <li className=\"nav-item\">\r\n        <NavLink\r\n          exact\r\n          to={`/${city}/${code}/weather`}\r\n          activeClassName=\"active\"\r\n          className=\"nav-link\"\r\n        >\r\n          Aktualna pogoda\r\n        </NavLink>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n        <NavLink\r\n          to={`/${city}/${code}/forecast`}\r\n          activeClassName=\"active\"\r\n          className=\"nav-link\"\r\n        >\r\n          Prognoza pogody\r\n        </NavLink>\r\n      </li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport CurrentWeather from './CurrentWeather';\r\nimport ForecastList from './ForecastList';\r\nimport SearchForm from './SearchForm';\r\nimport Navigation from './Navigation';\r\n\r\nconst Content = () => {\r\n  return (\r\n    <section>\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <SearchForm />\r\n        </Route>\r\n        <Route path=\"/:city/:code/weather\">\r\n          <SearchForm />\r\n          <Navigation />\r\n          <CurrentWeather />\r\n        </Route>\r\n        <Route path=\"/:city/:code/forecast\">\r\n          <SearchForm />\r\n          <Navigation />\r\n          <ForecastList />\r\n        </Route>\r\n      </Switch>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Content;\r\n","import React from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport Header from './components/Header';\r\nimport Content from './components/Content';\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <BrowserRouter>\r\n        <Header />\r\n        <div className='container'>\r\n          <Content />\r\n        </div>\r\n      </BrowserRouter>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'moment/locale/pl.js';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}